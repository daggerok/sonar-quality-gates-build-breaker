<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">

    <modelVersion>4.0.0</modelVersion>
    <name>${project.artifactId}</name>
    <url>https://github.com/daggerok/</url>
    <description>SonarQube üí• Build Breaker - fail pipeline builds according to its Quality GatesÔ∏è analysis</description>
    <groupId>com.github.daggerok.sonar</groupId>
    <artifactId>sonar-quality-gates-build-breaker</artifactId>
    <version>1.0.1-SNAPSHOT</version>
    <packaging>pom</packaging>

    <modules>
        <module>docker</module>
        <module>sonar-breaker</module>
        <module>sonar-breaker-maven-plugin</module>
        <module>examples</module>
        <module>docs</module>
    </modules>

    <properties>
        <mainClass />

        <java.version>1.8</java.version>
        <maven.compiler.source>${java.version}</maven.compiler.source>
        <maven.compiler.target>${java.version}</maven.compiler.target>

        <encoding>UTF-8</encoding>
        <project.build.sourceEncoding>${encoding}</project.build.sourceEncoding>
        <project.reporting.outputEncoding>${encoding}</project.reporting.outputEncoding>

        <!--<sonar.login>admin</sonar.login>
        <sonar.password>admin</sonar.password>-->
        <sonar.host.url>http://127.0.0.1:80</sonar.host.url>
        <sonar-maven-plugin.version>3.6.1.1688</sonar-maven-plugin.version>

        <frontend-maven-plugin.version>1.8.0</frontend-maven-plugin.version>
        <frontend-maven-plugin.npmVersion>6.11.3</frontend-maven-plugin.npmVersion>
        <frontend-maven-plugin.nodeVersion>v12.10.0</frontend-maven-plugin.nodeVersion>

        <maven.version>[3.3.9,)</maven.version>
        <!-- <maven.version>3.6.2</maven.version> -->
        <maven-plugin-plugin.version>3.6.0</maven-plugin-plugin.version>

        <vavr.version>0.10.2</vavr.version>
        <log4j.version>2.12.1</log4j.version>
        <lombok.version>1.18.10</lombok.version>
        <retrofit.version>2.6.1</retrofit.version>
        <maven-gpg-plugin.version>1.6</maven-gpg-plugin.version>
        <maven-jxr-plugin.version>3.0.0</maven-jxr-plugin.version>
        <maven-source-plugin.version>3.1.0</maven-source-plugin.version>
        <maven-javadoc-plugin.version>3.1.1</maven-javadoc-plugin.version>
        <maven-release-plugin.version>2.5.3</maven-release-plugin.version>
        <maven-assembly-plugin.version>3.1.1</maven-assembly-plugin.version>
        <github-release-plugin.version>1.3.0</github-release-plugin.version>
        <maven-surefire-plugin.version>3.0.0-M3</maven-surefire-plugin.version>
        <maven-scm-publish-plugin.version>3.0.0</maven-scm-publish-plugin.version>
        <maven-plugin-annotations.version>3.6.0</maven-plugin-annotations.version>
        <docker-compose-maven-plugin.version>2.5.1</docker-compose-maven-plugin.version>
        <spring-boot-starter-parent.version>2.1.8.RELEASE</spring-boot-starter-parent.version>
    </properties>

    <developers>
        <developer>
            <name>Maksim Kostromin</name>
            <email>daggerok@gmail.com</email>
            <organization>Sets of open source Maksim Kostromin aka daggerok projects</organization>
            <organizationUrl>https://github.com/daggerok/</organizationUrl>
        </developer>
    </developers>

    <licenses>
        <license>
            <name>MIT License</name>
            <url>https://github.com/daggerok/sonar-quality-gates-build-breaker/blob/master/LICENSE</url>
        </license>
    </licenses>

    <organization>
        <name>Maksim Kostromin aka daggerok open source projects sets</name>
        <url>https://github.com/daggerok/</url>
    </organization>

    <scm>
        <developerConnection>scm:git:git@github.com:daggerok/sonar-quality-gates-build-breaker.git</developerConnection>
        <connection>scm:git:https://github.com/daggerok/sonar-quality-gates-build-breaker.git</connection>
        <url>https://github.com/daggerok/sonar-quality-gates-build-breaker</url>
        <!-- <tag>master</tag> -->
        <tag>HEAD</tag>
    </scm>

    <dependencyManagement>
        <dependencies>
            <!-- internal modules -->
            <dependency>
                <groupId>com.github.daggerok.sonar</groupId>
                <artifactId>sonar-breaker</artifactId>
                <version>${project.version}</version>
            </dependency>
            <dependency>
                <groupId>com.github.daggerok.sonar</groupId>
                <artifactId>sonar-breaker-maven-plugin</artifactId>
                <version>${project.version}</version>
            </dependency>
            <!-- in java we trust -->
            <dependency>
                <groupId>io.vavr</groupId>
                <artifactId>vavr</artifactId>
                <version>${vavr.version}</version>
            </dependency>
            <!-- logging -->
            <dependency>
                <groupId>org.apache.logging.log4j</groupId>
                <artifactId>log4j-bom</artifactId>
                <version>${log4j.version}</version>
                <scope>import</scope>
                <type>pom</type>
            </dependency>
            <!-- rest api -->
            <dependency>
                <groupId>com.squareup.retrofit2</groupId>
                <artifactId>retrofit</artifactId>
                <version>${retrofit.version}</version>
                <type>jar</type>
            </dependency>
            <dependency>
                <groupId>com.squareup.retrofit2</groupId>
                <artifactId>converter-jackson</artifactId>
                <version>${retrofit.version}</version>
                <type>jar</type>
            </dependency>
            <!-- custom maven plugin -->
            <dependency>
                <groupId>org.apache.maven</groupId>
                <artifactId>maven-core</artifactId>
                <version>${maven.version}</version>
                <type>jar</type>
            </dependency>
            <dependency>
                <groupId>org.apache.maven.plugin-tools</groupId>
                <artifactId>maven-plugin-annotations</artifactId>
                <version>${maven-plugin-annotations.version}</version>
                <type>jar</type>
            </dependency>
            <!-- demo projects -->
            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-starter-parent</artifactId>
                <version>${spring-boot-starter-parent.version}</version>
                <scope>import</scope>
                <type>pom</type>
            </dependency>
        </dependencies>
    </dependencyManagement>

    <build>
        <defaultGoal>clean package</defaultGoal>

        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <version>${maven-surefire-plugin.version}</version>
            </plugin>

            <plugin>
                <groupId>org.sonarsource.scanner.maven</groupId>
                <artifactId>sonar-maven-plugin</artifactId>
                <version>${sonar-maven-plugin.version}</version>
            </plugin>
        </plugins>

        <pluginManagement>
            <plugins>
                <plugin>
                    <groupId>com.github.eirslett</groupId>
                    <artifactId>frontend-maven-plugin</artifactId>
                    <version>${frontend-maven-plugin.version}</version>
                    <executions>
                        <execution>
                            <id>install node and npm</id>
                            <goals>
                                <goal>install-node-and-npm</goal>
                            </goals>
                            <phase>process-resources</phase>
                        </execution>
                        <execution>
                            <id>npm install</id>
                            <goals>
                                <goal>npm</goal>
                            </goals>
                            <configuration>
                                <arguments>install</arguments>
                            </configuration>
                            <phase>process-resources</phase>
                        </execution>
                    </executions>
                    <configuration>
                        <skip>true</skip>
                        <npmVersion>${frontend-maven-plugin.npmVersion}</npmVersion>
                        <nodeVersion>${frontend-maven-plugin.nodeVersion}</nodeVersion>
                        <workingDirectory>${maven.multiModuleProjectDirectory}/docs</workingDirectory>
                        <installDirectory>${maven.multiModuleProjectDirectory}/target</installDirectory>
                    </configuration>
                </plugin>

                <plugin>
                    <groupId>com.dkanejs.maven.plugins</groupId>
                    <artifactId>docker-compose-maven-plugin</artifactId>
                    <version>${docker-compose-maven-plugin.version}</version>
                    <executions>
                        <execution>
                            <id>up</id>
                            <goals>
                                <goal>up</goal>
                            </goals>
                        </execution>
                        <execution>
                            <id>down</id>
                            <goals>
                                <goal>down</goal>
                            </goals>
                        </execution>
                        <execution>
                            <id>help</id>
                            <goals>
                                <goal>help</goal>
                            </goals>
                        </execution>
                    </executions>
                    <configuration>
                        <skip>true</skip>
                        <composeFiles>
                            <composeFile>${maven.multiModuleProjectDirectory}/docker/docker-compose.yaml</composeFile>
                        </composeFiles>
                        <detachedMode>true</detachedMode>
                        <removeVolumes>true</removeVolumes>
                        <removeOrphans>true</removeOrphans>
                        <removeImages>true</removeImages>
                        <removeImagesType>local</removeImagesType>
                        <build>true</build>
                        <detail>true</detail>
                        <verbose>false</verbose>
                        <projectName>sonar</projectName>
                    </configuration>
                </plugin>

                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-assembly-plugin</artifactId>
                    <version>${maven-assembly-plugin.version}</version>
                    <executions>
                        <execution>
                            <id>assemble-jar-with-dependencies</id>
                            <phase>package</phase>
                            <goals>
                                <goal>single</goal>
                            </goals>
                        </execution>
                    </executions>
                    <configuration>
                        <appendAssemblyId>false</appendAssemblyId>
                        <descriptorRefs>
                            <descriptorRef>jar-with-dependencies</descriptorRef>
                        </descriptorRefs>
                        <archive>
                            <manifest>
                                <mainClass>${mainClass}</mainClass>
                            </manifest>
                        </archive>
                        <finalName>${project.artifactId}-${project.version}-all</finalName>
                    </configuration>
                </plugin>
            </plugins>
        </pluginManagement>
    </build>

    <profiles>
        <profile>
            <id>sonar</id>
            <build>
                <defaultGoal>clean install sonar:sonar</defaultGoal>
            </build>
        </profile>

        <profile>
            <id>local-publish</id>
            <build>
                <!-- ./mvnw -P local-publish -->
                <defaultGoal>clean deploy</defaultGoal>
            </build>
            <distributionManagement>
                <repository>
                    <id>local-maven-repo</id>
                    <url>file://${maven.multiModuleProjectDirectory}/target/.m2/repository</url>
                </repository>
            </distributionManagement>
        </profile>

        <profile>
            <id>local-release</id>
            <build>
                <!--
                ./mvnw  -Dresume=false release:prepare release:perform \
                        -Darguments="-Dmaven.deploy.skip=true" \
                        -Plocal-release,local-publish \
                        -DgenerateBackupPoms=false \
                        -DskipTests -B -s .mvn/settings.xml
                -->
                <plugins>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-release-plugin</artifactId>
                        <version>${maven-release-plugin.version}</version>
                        <configuration>
                            <arguments>-DskipTests -Dmaven.deploy.skip=true</arguments>
                            <autoVersionSubmodules>true</autoVersionSubmodules>
                            <tagNameFormat>@{project.version}</tagNameFormat>
                            <generateReleasePoms>false</generateReleasePoms>
                            <resume>false</resume>
                        </configuration>
                    </plugin>
                </plugins>
            </build>
        </profile>

        <profile>
            <id>github-publish</id>
            <build>
                <!--
                at first time:
                1) cp .mvn/settings.template.xml settings.xml and update it accordingly
                2) on github project repo create maven branch to be used for publishing artifacts
                ./mvnw -P local-publish ; ./mvnw -P github-publish -pl :sonar-quality-gates-build-breaker -s .mvn/settings.xml
                -->
                <defaultGoal>scm-publish:publish-scm</defaultGoal>
                <plugins>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-scm-publish-plugin</artifactId>
                        <version>${maven-scm-publish-plugin.version}</version>
                        <configuration>
                            <content>${maven.multiModuleProjectDirectory}/target/.m2/repository/</content>
                            <!--<includes>**/*.*</includes>-->
                            <skipDeletedFiles>true</skipDeletedFiles>
                            <scmBranch>maven</scmBranch>
                            <tryUpdate>true</tryUpdate>
                        </configuration>
                    </plugin>
                </plugins>
            </build>
            <distributionManagement>
                <site>
                    <id>daggerok-github</id>
                    <url>${project.scm.developerConnection}</url>
                </site>
            </distributionManagement>
        </profile>

        <profile>
            <id>upload-github-release</id>
            <build>
                <!--
                release maven artifacts (mvn deploy -P local-publish) from target/.m2/repository to github repo
                ./mvnw clean package
                ./mvnw -P upload-github-release -pl :sonar-quality-gates-build-breaker
                -->
                <defaultGoal>de.jutzig:github-release-plugin:${github-release-plugin.version}:release</defaultGoal>
                <plugins>
                    <plugin>
                        <groupId>de.jutzig</groupId>
                        <artifactId>github-release-plugin</artifactId>
                        <version>${github-release-plugin.version}</version>
                        <executions>
                            <execution>
                                <id>release</id>
                                <phase>deploy</phase>
                            </execution>
                        </executions>
                        <configuration>
                            <overwriteArtifact>true</overwriteArtifact>
                            <description>${project.artifactId} release</description>
                            <releaseName>v${project.version}</releaseName>
                            <tag>${project.version}</tag>
                            <fileSets>
                                <fileSet>
                                    <directory>${maven.multiModuleProjectDirectory}</directory>
                                    <includes>
                                        <include>*.md</include>
                                    </includes>
                                </fileSet>
                                <fileSet>
                                    <directory>${maven.multiModuleProjectDirectory}</directory>
                                    <includes>
                                        <include>**/target/*.jar</include>
                                    </includes>
                                </fileSet>
                            </fileSets>
                        </configuration>
                    </plugin>
                </plugins>
            </build>
        </profile>

        <profile>
            <id>bintray-publish</id>
            <build>
                <!--
                ./mvnw -B release:clean release:prepare release:perform \
                       -P ,local-publish \
                       -Dmaven.deploy.skip=true \
                       -s .m2/settings.xml \
                       -Dresume=false
                -->
                <defaultGoal>release:clean release:prepare release:perform</defaultGoal>
                <plugins>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-release-plugin</artifactId>
                        <version>${maven-release-plugin.version}</version>
                        <configuration>
                            <!--<arguments>-DskipTests</arguments>-->
                            <autoVersionSubmodules>true</autoVersionSubmodules>
                            <tagNameFormat>@{project.version}</tagNameFormat>
                            <generateReleasePoms>false</generateReleasePoms>
                            <preparationGoals>clean</preparationGoals>
                            <completionGoals>clean</completionGoals>
                        </configuration>
                    </plugin>

                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-javadoc-plugin</artifactId>
                        <version>${maven-javadoc-plugin.version}</version>
                        <executions>
                            <execution>
                                <id>attach-javadocs</id>
                                <goals>
                                    <goal>jar</goal>
                                </goals>
                            </execution>
                        </executions>
                        <configuration>
                            <failOnError>false</failOnError>
                            <failOnWarnings>false</failOnWarnings>
                        </configuration>
                    </plugin>

                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-source-plugin</artifactId>
                        <version>${maven-source-plugin.version}</version>
                        <executions>
                            <execution>
                                <id>attach-sources</id>
                                <goals>
                                    <goal>jar-no-fork</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>

            <reporting>
                <plugins>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-javadoc-plugin</artifactId>
                        <version>${maven-javadoc-plugin.version}</version>
                        <configuration>
                            <minmemory>128m</minmemory>
                            <maxmemory>512</maxmemory>
                        </configuration>
                    </plugin>
                </plugins>
            </reporting>
        </profile>

        <profile>
            <id>read gpg.passphrase from system-property</id>
            <activation>
                <property>
                    <name>gpg.passphrase</name>
                </property>
            </activation>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-gpg-plugin</artifactId>
                        <version>${maven-gpg-plugin.version}</version>
                        <executions>
                            <execution>
                                <id>sign-artifacts</id>
                                <phase>verify</phase>
                                <goals>
                                    <goal>sign</goal>
                                </goals>
                            </execution>
                        </executions>
                        <configuration>
                            <passphrase>${gpg.passphrase}</passphrase>
                        </configuration>
                    </plugin>
                </plugins>
            </build>
        </profile>

        <profile>
            <id>read gpg.passphrase from environment variable</id>
            <activation>
                <property>
                    <name>env.GPG_PASSPHRASE</name>
                </property>
            </activation>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-gpg-plugin</artifactId>
                        <version>${maven-gpg-plugin.version}</version>
                        <executions>
                            <execution>
                                <id>sign-artifacts</id>
                                <phase>verify</phase>
                                <goals>
                                    <goal>sign</goal>
                                </goals>
                            </execution>
                        </executions>
                        <configuration>
                            <passphrase>${env.GPG_PASSPHRASE}</passphrase>
                        </configuration>
                    </plugin>
                </plugins>
            </build>
        </profile>
    </profiles>

    <distributionManagement>
        <repository>
            <id>bintray-daggerok-maven</id>
            <name>daggerok-maven</name>
            <url>https://api.bintray.com/maven/daggerok/maven/sonar-quality-gates-build-breaker/;publish=1</url>
        </repository>
    </distributionManagement>

</project>
